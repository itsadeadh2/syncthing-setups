AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CloudFormation Template to deploy Syncthing on Fargate with EFS for persistent storage"

Parameters:
  Revision:
    Type: String
    Description: 'Name of an existing EC2 KeyPair for SSH access'
    Default: '0'
  Memory:
    Type: String
    Description: 'The amount of memory you want your task to have'
    Default: 0.5 GB
  CPU:
    Type: String
    Description: 'The amount of vCPUs you want your task to have'
    Default: .25 vCPU
  StartTime:
    Type: String
    Description: "Time to start the ECS service (Cron expression)"
    Default: cron(0 8 * * ? *)
  StopTime:
    Type: String
    Description: "Time to stop the ECS service (Cron expression)"
    Default: cron(0 10 * * ? *)

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "SyncthingCluster"
      Configuration:
        ExecuteCommandConfiguration:
          Logging: 'DEFAULT'
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  SyncthingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "SyncthingTask"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ContainerDefinitions:
        - Name: !Sub "syncthing-${Revision}"
          Image: "linuxserver/syncthing:1.27.6"
          Essential: true
          PortMappings:
            - ContainerPort: 8384
            - ContainerPort: 22000
          MountPoints:
            - ContainerPath: "/config"
              SourceVolume: "SyncthingConfigVolume"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
      Volumes:
        - Name: "SyncthingConfigVolume"
          EFSVolumeConfiguration:
            FilesystemId: !ImportValue efs-export
            TransitEncryption: ENABLED

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: "SyncthingService"
      TaskDefinition: !Ref SyncthingTaskDefinition
      DesiredCount: 0
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      EnableExecuteCommand: True
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue public-subnet-1-export
          SecurityGroups:
            - !ImportValue securitygroup-export
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        - ContainerName: !Sub "syncthing-${Revision}"
          ContainerPort: 8384  # Match the port for Syncthing
          TargetGroupArn: !ImportValue elb-targetgroup-export

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - logs:*
                  - ec2:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - efs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - elb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "LambdaECSControlPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource: "*"

  StartServiceFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            import boto3
            def lambda_handler(event, context):
                client = boto3.client('ecs')
                response = client.update_service(
                    cluster='SyncthingCluster',
                    service='SyncthingService',
                    desiredCount=1
                )
                return response
        Handler: "index.lambda_handler"
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: "python3.9"

  StopServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
              client = boto3.client('ecs')
              response = client.update_service(
                  cluster='SyncthingCluster',
                  service='SyncthingService',
                  desiredCount=0
              )
              return response
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.9"

  StartRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref StartTime
      Targets:
        - Id: "StartServiceTarget"
          Arn: !GetAtt StartServiceFunction.Arn

  StopRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref StopTime
      Targets:
        - Id: "StopServiceTarget"
          Arn: !GetAtt StopServiceFunction.Arn

  StartPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref StartServiceFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StartRule.Arn

  StopPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref StopServiceFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StopRule.Arn
